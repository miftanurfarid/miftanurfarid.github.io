<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://miftanurfarid.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://miftanurfarid.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-29T20:42:08+00:00</updated><id>https://miftanurfarid.github.io/feed.xml</id><title type="html">blank</title><subtitle>Sebuah ruang di mana saya berbagi catatan perjalanan dalam mengajar, penelitian, dan bimbingan akademik.</subtitle><entry><title type="html">Using Try-Except for Automatic Installation of Required Python Libraries</title><link href="https://miftanurfarid.github.io/blog/2024/try-except-library/" rel="alternate" type="text/html" title="Using Try-Except for Automatic Installation of Required Python Libraries"/><published>2024-10-28T15:06:00+00:00</published><updated>2024-10-28T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/try-except-library</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/try-except-library/"><![CDATA[<p>To ensure that required libraries like <code class="language-plaintext highlighter-rouge">matplotlib</code>, <code class="language-plaintext highlighter-rouge">numpy</code>, and <code class="language-plaintext highlighter-rouge">librosa</code> are installed, you can use a <code class="language-plaintext highlighter-rouge">try-except</code> block to check for imports and install them using <code class="language-plaintext highlighter-rouge">subprocess</code>. Here’s an example implementation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="c1"># List of required libraries
</span><span class="n">libraries</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">matplotlib</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">numpy</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">librosa</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">library</span> <span class="ow">in</span> <span class="n">libraries</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">__import__</span><span class="p">(</span><span class="n">library</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is already installed.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ImportError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is not installed. Installing </span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_call</span><span class="p">([</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-m</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pip</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">install</span><span class="sh">"</span><span class="p">,</span> <span class="n">library</span><span class="p">])</span>
</code></pre></div></div> <p>Note:</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">os</code> library is part of Python’s standard library, so it shouldn’t require installation. You can remove it from the list if it’s not needed.</li> <li>To run this, Python must have internet access and permission to install libraries.</li> </ul>]]></content><author><name></name></author><category term="python"/><category term="python"/><category term="try-except"/><summary type="html"><![CDATA[This post discusses how to use try-except blocks to ensure that required Python libraries are installed automatically.]]></summary></entry><entry><title type="html">Creating a Shared Folder from Ubuntu to Manjaro in VirtualBox</title><link href="https://miftanurfarid.github.io/blog/2018/shared-folder-virtual-machine/" rel="alternate" type="text/html" title="Creating a Shared Folder from Ubuntu to Manjaro in VirtualBox"/><published>2018-05-06T15:06:00+00:00</published><updated>2018-05-06T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2018/shared-folder-virtual-machine</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2018/shared-folder-virtual-machine/"><![CDATA[<p>Here’s how to create a shared folder from an Ubuntu host to a Manjaro guest. Yes, both are Linux—I’m just trying out Manjaro in VirtualBox before migrating from Ubuntu. 😄</p> <ol> <li><strong>Select settings on the virtual machine.</strong></li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2018-05-06/2-480.webp 480w,/assets/img/2018-05-06/2-800.webp 800w,/assets/img/2018-05-06/2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/2018-05-06/2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ol> <li><strong>Choose Shared Folders</strong> and click the icon to add a new shared folder. <ul> <li>In the “Add Share” window, enter the directory path of the folder you want to share with the guest in the “Folder Path” field, and provide a name for the folder in the “Folder Name” field.</li> <li>Check <strong>Auto-mount</strong> and <strong>Make Permanent</strong>, then click <strong>OK</strong>.</li> </ul> </li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2018-05-06/3-480.webp 480w,/assets/img/2018-05-06/3-800.webp 800w,/assets/img/2018-05-06/3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/2018-05-06/3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ol> <li><strong>Optional Settings:</strong> <ul> <li>Check <strong>Read-only</strong> if you want the guest to have read-only permission, without write or edit access to the content in the folder.</li> <li>Check <strong>Auto-mount</strong> to automatically mount the folder (in this case, the Manjaro guest might not auto-mount).</li> <li>Check <strong>Make Permanent</strong> so that the auto-mount will persist even after the guest is restarted.</li> </ul> </li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2018-05-06/4-480.webp 480w,/assets/img/2018-05-06/4-800.webp 800w,/assets/img/2018-05-06/4-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/2018-05-06/4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ol> <li><strong>Next, open a terminal in the guest (Manjaro), and type:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mount <span class="nt">-t</span> vboxsf Shared /home/abudzar/Shared <span class="nt">-o</span> <span class="nv">uid</span><span class="o">=</span>1000,gid<span class="o">=</span>1000
</code></pre></div> </div> <ul> <li><code class="language-plaintext highlighter-rouge">Shared</code> is the name of the folder shared from the host (Ubuntu), and <code class="language-plaintext highlighter-rouge">/home/abudzar/Shared</code> is the directory where the <code class="language-plaintext highlighter-rouge">Shared</code> folder will be mounted in the guest (Manjaro).</li> <li><code class="language-plaintext highlighter-rouge">uid=1000</code> and <code class="language-plaintext highlighter-rouge">gid=1000</code> represent the current user ID and group ID of the guest. If you don’t enter this command, the owner of the shared folder and files will be root.</li> </ul> </li> </ol>]]></content><author><name></name></author><category term="linux"/><category term="software"/><category term="linux"/><category term="ubuntu"/><category term="manjaro"/><category term="virtualbox"/><summary type="html"><![CDATA[This guide explains how to set up a shared folder between an Ubuntu host and a Manjaro guest in VirtualBox, including steps for configuring shared folder settings and mounting the folder in the guest system.]]></summary></entry><entry><title type="html">Fixing Slow Shutdown Issues on Ubuntu 16.04</title><link href="https://miftanurfarid.github.io/blog/2017/shutdown-issues/" rel="alternate" type="text/html" title="Fixing Slow Shutdown Issues on Ubuntu 16.04"/><published>2017-05-30T15:06:00+00:00</published><updated>2017-05-30T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2017/shutdown-issues</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2017/shutdown-issues/"><![CDATA[<p>Recently, my laptop running Ubuntu 16.04 has been experiencing a problem where the shutdown process takes an unusually long time.</p> <p>During the shutdown process, if you press the escape key, it will display the processes that are causing the delay. In my case, it was:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Stopping thermal daemon services
</code></pre></div></div> <p>The solution is to stop this service through the terminal. The service responsible for the thermal daemon is <code class="language-plaintext highlighter-rouge">cups-browsed</code>, so you can disable it with the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl disable cups-browsed.service
</code></pre></div></div>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="ubuntu"/><summary type="html"><![CDATA[This post outlines a solution for speeding up the shutdown process on Ubuntu 16.04 by disabling the cups-browsed service, which can cause delays during shutdown.]]></summary></entry><entry><title type="html">Installing Octave 4.2.0 on Ubuntu 16.04</title><link href="https://miftanurfarid.github.io/blog/2017/octave-ubuntu/" rel="alternate" type="text/html" title="Installing Octave 4.2.0 on Ubuntu 16.04"/><published>2017-05-17T15:06:00+00:00</published><updated>2017-05-17T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2017/octave-ubuntu</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2017/octave-ubuntu/"><![CDATA[<p><strong>Installing Octave 4.2.0 on Ubuntu 16.04</strong></p> <ol> <li><strong>Download Octave 4.2.0 source:</strong> <ul> <li>Through terminal emulator: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://ftp.gnu.org/gnu/octave/octave-4.2.0.tar.gz
</code></pre></div> </div> </li> <li>Extract Octave: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar</span> <span class="nt">-xvf</span> octave-4.2.0.tar.gz
</code></pre></div> </div> </li> <li>Or download via browser.</li> </ul> </li> <li><strong>Install dependencies:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>gcc g++ gfortran make libblas-dev liblapack-dev libpcre3-dev libarpack2-dev libcurl4-gnutls-dev epstool libfftw3-dev transfig libfltk1.3-dev libfontconfig1-dev libfreetype6-dev libgl2ps-dev libglpk-dev libreadline-dev gnuplot-x11 libgraphicsmagick++1-dev libhdf5-serial-dev openjdk-8-jdk libsndfile1-dev llvm-dev lpr texinfo libgl1-mesa-dev libosmesa6-dev pstoedit portaudio19-dev libqhull-dev libqrupdate-dev libqscintilla2-dev libqt4-dev libqtcore4 libqtwebkit4 libqt4-network libqtgui4 libqt4-opengl-dev libsuitesparse-dev texlive libxft-dev zlib1g-dev autoconf automake bison flex gperf <span class="nb">gzip </span>icoutils librsvg2-bin libtool perl rsync <span class="nb">tar</span>
</code></pre></div> </div> </li> <li><strong>To ensure all linked libraries support 64-bit variables, download OpenBLAS here:</strong> <ul> <li><a href="https://github.com/xianyi/OpenBLAS.git">OpenBLAS GitHub Repository</a></li> <li>Extract it, go to the OpenBLAS directory, then open the <code class="language-plaintext highlighter-rouge">Makefile.rule</code> file.</li> <li>Remove the <code class="language-plaintext highlighter-rouge">#</code> from <code class="language-plaintext highlighter-rouge">BINARY=64</code> and <code class="language-plaintext highlighter-rouge">INTERFACE64=1</code>, then save.</li> </ul> </li> <li><strong>In the terminal emulator:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make
<span class="nb">sudo </span>make <span class="nb">install
sudo </span>apt-get <span class="nb">install </span>libopenblas-base
</code></pre></div> </div> </li> <li><strong>Navigate to the extracted Octave folder:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./configure <span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/lib/jvm/java-7-openjdk-amd64 <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/opt/OpenBLAS/lib <span class="nv">CPPFLAGS</span><span class="o">=</span><span class="nt">-I</span>/opt/OpenBLAS/include <span class="nv">LDFLAGS</span><span class="o">=</span><span class="nt">-L</span>/opt/OpenBLAS/lib <span class="nt">--enable-64</span>
make
<span class="nb">sudo </span>make <span class="nb">install</span>
</code></pre></div> </div> </li> </ol> <p><strong>If the following error appears:</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>octave-cli: error while loading shared libraries: libopenblas.so.0: cannot open shared object file: No such file or directory
</code></pre></div></div> <p><strong>Solution:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>libopenblas-base
octave <span class="nt">--force-gui</span>
</code></pre></div></div> <p>Then set it to the launcher.</p> <p><strong>If an error occurs when running the command above, the solution is to change the owner from root to user:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown</span> <span class="nt">-R</span> user:user /home/username/.config/octave/
</code></pre></div></div> <p><strong>If <code class="language-plaintext highlighter-rouge">ctrl + c</code> causes a crash, run this in the terminal:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">OMP_NUM_THREADS</span><span class="o">=</span>1
</code></pre></div></div> <p><strong>Sources:</strong></p> <ul> <li><a href="http://wiki.octave.org/Octave_for_Debian_systems">Octave for Debian systems</a></li> <li><a href="https://github.com/xianyi/OpenBLAS">OpenBLAS GitHub Repository</a></li> <li><a href="https://github.com/xianyi/OpenBLAS/wiki/Installation-Guide">OpenBLAS Installation Guide</a></li> </ul>]]></content><author><name></name></author><category term="linux"/><category term="software"/><category term="linux"/><category term="octave"/><category term="ubuntu"/><summary type="html"><![CDATA[This post provides a step-by-step guide on how to install Octave 4.2.0 on Ubuntu 16.04, including downloading the source, installing dependencies, and configuring the environment.]]></summary></entry><entry><title type="html">Setting Up Proxy for Git</title><link href="https://miftanurfarid.github.io/blog/2016/git-proxy/" rel="alternate" type="text/html" title="Setting Up Proxy for Git"/><published>2016-08-26T15:06:00+00:00</published><updated>2016-08-26T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2016/git-proxy</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2016/git-proxy/"><![CDATA[<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> http.proxy http://user:password@proxyserver:proxyport
</code></pre></div></div> <p>Replace:</p> <ul> <li><code class="language-plaintext highlighter-rouge">user</code>: your proxy username</li> <li><code class="language-plaintext highlighter-rouge">password</code>: your proxy password</li> <li><code class="language-plaintext highlighter-rouge">proxyserver</code>: the proxy server URL</li> <li><code class="language-plaintext highlighter-rouge">proxyport</code>: the port number on the proxy server</li> </ul> <p>To stop using the proxy:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> <span class="nt">--unset</span> http.proxy
</code></pre></div></div>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="git"/><category term="proxy"/><summary type="html"><![CDATA[This post explains how to configure Git to work behind a proxy server by setting the proxy credentials directly in Git’s configuration. It also covers how to remove the proxy settings when they are no longer needed.]]></summary></entry><entry><title type="html">Configuring Wget for Proxy-Restricted Campus Networks</title><link href="https://miftanurfarid.github.io/blog/2016/wget-proxy/" rel="alternate" type="text/html" title="Configuring Wget for Proxy-Restricted Campus Networks"/><published>2016-02-03T15:06:00+00:00</published><updated>2016-02-03T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2016/wget-proxy</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2016/wget-proxy/"><![CDATA[<p>Open the <code class="language-plaintext highlighter-rouge">wgetrc</code> file in the <code class="language-plaintext highlighter-rouge">etc</code> folder by using the following command in the terminal:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>gedit /etc/wgetrc
</code></pre></div></div> <p>You can replace <code class="language-plaintext highlighter-rouge">gedit</code> with the editor you prefer, such as <code class="language-plaintext highlighter-rouge">nano</code>, <code class="language-plaintext highlighter-rouge">vim</code>, etc.</p> <p>Search for the text that looks like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># You can set the default proxies for Wget to use for http, https, and ftp.
# They will override the value in the environment.
#https_proxy = http://proxy.yoyodyne.com:18023/
#http_proxy = http://proxy.yoyodyne.com:18023/
#ftp_proxy = http://proxy.yoyodyne.com:18023/
</code></pre></div></div> <p>Then, remove the hash symbol (<code class="language-plaintext highlighter-rouge">#</code>) and edit the <code class="language-plaintext highlighter-rouge">https_proxy</code>, <code class="language-plaintext highlighter-rouge">http_proxy</code>, and <code class="language-plaintext highlighter-rouge">ftp_proxy</code> sections according to the proxy you use. For example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># You can set the default proxies for Wget to use for http, https, and ftp.
# They will override the value in the environment.
https_proxy = http://proxy.mycampus.com:8023/
http_proxy = http://proxy.mycampus.com:8023/
ftp_proxy = http://proxy.mycampus.com:8023/
</code></pre></div></div> <p>If the proxy you use requires authentication with a username and password, set it up as follows:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># You can set the default proxies for Wget to use for http, https, and ftp.
# They will override the value in the environment.
https_proxy = http://username:password@proxy.mycampus.com:8023/
http_proxy = http://username:password@proxy.mycampus.com:8023/
ftp_proxy = http://username:password@proxy.mycampus.com:8023/
</code></pre></div></div> <p>Then, remove the hash symbol (<code class="language-plaintext highlighter-rouge">#</code>) from <code class="language-plaintext highlighter-rouge">use_proxy = on</code> to enable it:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># If you do not want to use proxy at all, set this to off.
use_proxy = on
</code></pre></div></div> <p>Finally, save the file.</p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="wget"/><category term="proxy"/><summary type="html"><![CDATA[The internet at my campus, Institut Teknologi Sepuluh Nopember, uses a proxy, which makes downloading files with wget challenging. This post provides guidance on configuring wget with proxy settings to facilitate downloads in such an environment.]]></summary></entry></feed>