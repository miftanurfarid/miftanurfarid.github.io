<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://miftanurfarid.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://miftanurfarid.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-30T11:22:15+00:00</updated><id>https://miftanurfarid.github.io/feed.xml</id><title type="html">blank</title><subtitle>Sebuah ruang di mana saya berbagi catatan perjalanan dalam mengajar, penelitian, dan bimbingan akademik.</subtitle><entry><title type="html"></title><link href="https://miftanurfarid.github.io/blog/2024/2021-09-15-uninstall-wrapt/" rel="alternate" type="text/html" title=""/><published>2024-10-30T11:22:15+00:00</published><updated>2024-10-30T11:22:15+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/2021-09-15-uninstall-wrapt</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/2021-09-15-uninstall-wrapt/"><![CDATA[<p>When trying to install TensorFlow, you might encounter an error message stating that it cannot uninstall the package <code class="language-plaintext highlighter-rouge">wrapt</code>. This issue arises due to conflicts between the installed version of <code class="language-plaintext highlighter-rouge">wrapt</code> and the version required by TensorFlow. Fortunately, you can resolve this problem with a couple of simple commands.</p> <h3 id="why-the-error-occurs">Why the Error Occurs</h3> <p>The <code class="language-plaintext highlighter-rouge">wrapt</code> package is a Python library that TensorFlow depends on for functionality, especially in relation to decorators and function wrapping. When TensorFlow is installed or upgraded, it requires a specific version of <code class="language-plaintext highlighter-rouge">wrapt</code>. If an incompatible version is already installed, TensorFlow will attempt to uninstall it but may run into permissions issues or other conflicts.</p> <h3 id="steps-to-resolve-the-issue">Steps to Resolve the Issue</h3> <p>To successfully install TensorFlow while resolving the <code class="language-plaintext highlighter-rouge">wrapt</code> conflict, follow these steps:</p> <ol> <li> <p><strong>Upgrade wrapt with Ignore Installed Flag:</strong> Open your terminal and run the following command. This will force the installation of the latest version of <code class="language-plaintext highlighter-rouge">wrapt</code>, ignoring any currently installed versions.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>wrapt <span class="nt">--upgrade</span> <span class="nt">--ignore-installed</span>
</code></pre></div> </div> <p>This command tells <code class="language-plaintext highlighter-rouge">pip</code> to upgrade <code class="language-plaintext highlighter-rouge">wrapt</code> and bypass any checks that might prevent it from being updated. By doing this, you ensure that you have the version that is compatible with TensorFlow.</p> </li> <li> <p><strong>Install TensorFlow:</strong> After successfully upgrading <code class="language-plaintext highlighter-rouge">wrapt</code>, you can now proceed to install TensorFlow:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>tensorflow
</code></pre></div> </div> <p>This command will install TensorFlow along with its dependencies, including the correctly versioned <code class="language-plaintext highlighter-rouge">wrapt</code> package.</p> </li> </ol>]]></content><author><name></name></author></entry><entry><title type="html">Using Try-Except for Automatic Installation of Required Python Libraries</title><link href="https://miftanurfarid.github.io/blog/2024/try-except-library/" rel="alternate" type="text/html" title="Using Try-Except for Automatic Installation of Required Python Libraries"/><published>2024-10-29T15:06:00+00:00</published><updated>2024-10-29T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/try-except-library</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/try-except-library/"><![CDATA[<p>To ensure that required libraries like <code class="language-plaintext highlighter-rouge">matplotlib</code>, <code class="language-plaintext highlighter-rouge">numpy</code>, and <code class="language-plaintext highlighter-rouge">librosa</code> are installed, you can use a <code class="language-plaintext highlighter-rouge">try-except</code> block to check for imports and install them using <code class="language-plaintext highlighter-rouge">subprocess</code>. Here’s an example implementation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="c1"># List of required libraries
</span><span class="n">libraries</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">matplotlib</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">numpy</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">librosa</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">library</span> <span class="ow">in</span> <span class="n">libraries</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">__import__</span><span class="p">(</span><span class="n">library</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is already installed.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ImportError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is not installed. Installing </span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_call</span><span class="p">([</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-m</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pip</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">install</span><span class="sh">"</span><span class="p">,</span> <span class="n">library</span><span class="p">])</span>
</code></pre></div></div> <p>Note:</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">os</code> library is part of Python’s standard library, so it shouldn’t require installation. You can remove it from the list if it’s not needed.</li> <li>To run this, Python must have internet access and permission to install libraries.</li> </ul>]]></content><author><name></name></author><category term="python"/><category term="python"/><category term="try-except"/><summary type="html"><![CDATA[This post discusses how to use try-except blocks to ensure that required Python libraries are installed automatically.]]></summary></entry><entry><title type="html">Setting the Default Browser for JupyterLab on Linux</title><link href="https://miftanurfarid.github.io/blog/2023/jupyter-default-browser/" rel="alternate" type="text/html" title="Setting the Default Browser for JupyterLab on Linux"/><published>2023-09-12T09:06:00+00:00</published><updated>2023-09-12T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2023/jupyter-default-browser</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2023/jupyter-default-browser/"><![CDATA[<p>To change the default browser for JupyterLab on Linux, follow these steps:</p> <ol> <li>Open a terminal and run the following command to generate a configuration file for JupyterLab: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter-lab --generate-config
</code></pre></div> </div> <p>This will create a <code class="language-plaintext highlighter-rouge">jupyter_lab_config.py</code> file in <code class="language-plaintext highlighter-rouge">$HOME/.jupyter</code>.</p> </li> <li> <p>Open this file in your preferred text editor.</p> </li> <li>Find the line: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#c.ServerApp.browser = ''
</span></code></pre></div> </div> <p>Remove the <code class="language-plaintext highlighter-rouge">#</code> to uncomment it.</p> </li> <li>Replace the empty string <code class="language-plaintext highlighter-rouge">''</code> with the path to your desired browser. For instance, if you want to use Microsoft Edge, update the line to: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span><span class="p">.</span><span class="n">ServerApp</span><span class="p">.</span><span class="n">browser</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/opt/microsoft/msedge/msedge %s</span><span class="sh">'</span>
</code></pre></div> </div> </li> <li>Save the changes.</li> </ol> <p>Now, when you launch JupyterLab, it should open in your chosen browser by default.</p>]]></content><author><name></name></author><category term="linux"/><category term="git"/><category term="linux"/><category term="git"/><category term="branch"/><summary type="html"><![CDATA[Learn how to configure JupyterLab to open in your preferred browser by adjusting the jupyter_lab_config.py file.]]></summary></entry><entry><title type="html">Resolving Mounting Errors for External Hard Drives in Linux</title><link href="https://miftanurfarid.github.io/blog/2023/fix-ntfs/" rel="alternate" type="text/html" title="Resolving Mounting Errors for External Hard Drives in Linux"/><published>2023-09-12T09:06:00+00:00</published><updated>2023-09-12T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2023/fix-ntfs</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2023/fix-ntfs/"><![CDATA[<ol> <li><strong>Identify the Issue</strong>: When you encounter errors like “Wrong Fs Type, Bad Option, Bad Superblock” while mounting an external hard drive, open the terminal and run: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dmesg
</code></pre></div> </div> <p>Look for any messages indicating issues with the hard drive, such as ‘ntfs3: sdb1: the volume is dirty, and the “force” flag is not set!’</p> </li> <li><strong>Run ntfsfix</strong>: If the volume is flagged as “dirty,” fix it with the following command: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo ntfsfix -d /dev/sdb1
</code></pre></div> </div> <p>Replace <code class="language-plaintext highlighter-rouge">/dev/sdb1</code> with the correct path to your drive.</p> </li> <li><strong>Verify</strong>: After the command completes, try remounting the drive to ensure the issue is resolved.</li> </ol> <p>By following these steps, your hard drive should be accessible once more, resolving mounting issues without the need for extensive troubleshooting.</p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="ntfsfix"/><category term="drive"/><summary type="html"><![CDATA[Use ntfsfix to repair a Wrong Fs Type, Bad Option, Bad Superblock error on an external drive, allowing it to mount properly.]]></summary></entry><entry><title type="html">Copy a Version of a Single File or Folder from One Git Branch to Another</title><link href="https://miftanurfarid.github.io/blog/2023/copy-git/" rel="alternate" type="text/html" title="Copy a Version of a Single File or Folder from One Git Branch to Another"/><published>2023-08-15T09:06:00+00:00</published><updated>2023-08-15T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2023/copy-git</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2023/copy-git/"><![CDATA[<p>To copy a specific file from one Git branch to another, run this command from the branch where you want the file to be placed:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout otherbranch myfile.txt
</code></pre></div></div> <p>Source: <a href="https://stackoverflow.com/questions/307579/how-do-i-copy-a-version-of-a-single-file-from-one-git-branch-to-another">Stack Overflow</a></p>]]></content><author><name></name></author><category term="linux"/><category term="git"/><category term="linux"/><category term="git"/><category term="branch"/><summary type="html"><![CDATA[Quickly transfer a specific file from one branch to another using the git checkout command.]]></summary></entry><entry><title type="html">Creating a Windows LiveUSB on Linux with WoeUSB</title><link href="https://miftanurfarid.github.io/blog/2023/win-liveusb-woeusb/" rel="alternate" type="text/html" title="Creating a Windows LiveUSB on Linux with WoeUSB"/><published>2023-08-01T09:06:00+00:00</published><updated>2023-08-01T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2023/win-liveusb-woeusb</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2023/win-liveusb-woeusb/"><![CDATA[<ol> <li>Download WoeUSB from <a href="https://github.com/WoeUSB/WoeUSB/releases/download/v5.2.4/woeusb-5.2.4.bash">https://github.com/WoeUSB/WoeUSB/releases/download/v5.2.4/woeusb-5.2.4.bash</a>.</li> <li>Run the command: <code class="language-plaintext highlighter-rouge">sudo ./woeusb-5.2.4.bash --device Win10_22H2_English_x64.iso /dev/sdb</code>. Adjust <code class="language-plaintext highlighter-rouge">Win10_22H2_English_x64.iso</code> to match the name of your Windows ISO file, and <code class="language-plaintext highlighter-rouge">/dev/sdb</code> to the directory of your flash drive.</li> <li>Wait for the process to complete.</li> </ol>]]></content><author><name></name></author><category term="linux"/><category term="windows"/><category term="linux"/><category term="windows"/><category term="liveusb"/><category term="woeusb"/><summary type="html"><![CDATA[Easily set up a Windows bootable USB drive on Linux by using WoeUSB to prepare and write the Windows ISO to your flash drive.]]></summary></entry><entry><title type="html">Sorting Applications Alphabetically in Gnome 42</title><link href="https://miftanurfarid.github.io/blog/2022/gnome-42/" rel="alternate" type="text/html" title="Sorting Applications Alphabetically in Gnome 42"/><published>2022-09-15T09:06:00+00:00</published><updated>2022-09-15T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2022/gnome-42</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2022/gnome-42/"><![CDATA[<p>By default, applications installed on Linux with Gnome 42 are not sorted alphabetically; instead, they appear in the order they were installed, as shown in Figure 1 below.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/gnome1-480.webp 480w,/assets/img/gnome1-800.webp 800w,/assets/img/gnome1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/gnome1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Unsorted Application List </div> <p>To sort these applications alphabetically, use the following command in the terminal:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gsettings <span class="nb">set </span>org.gnome.shell app-picker-layout <span class="s2">"[]"</span>
</code></pre></div></div> <p>After running this command, restart or log out to see the change. The application list should now appear in alphabetical order, as shown in Figure 2.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/gnome2-480.webp 480w,/assets/img/gnome2-800.webp 800w,/assets/img/gnome2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/gnome2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/gnome3-480.webp 480w,/assets/img/gnome3-800.webp 800w,/assets/img/gnome3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/gnome3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/gnome4-480.webp 480w,/assets/img/gnome4-800.webp 800w,/assets/img/gnome4-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/gnome4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <div class="caption"> Alphabetically Sorted Application List </div> <p><strong>Limitations</strong>:<br/> This method requires a restart or logout to take effect. Additionally, each time a new application is installed, it won’t automatically be placed in alphabetical order. You’ll need to rerun the command above after each installation.</p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="fedora"/><category term="gnome"/><summary type="html"><![CDATA[A simple command to alphabetize your application list in Gnome 42.]]></summary></entry><entry><title type="html">Installing Mendeley Desktop on Ubuntu 22.04</title><link href="https://miftanurfarid.github.io/blog/2022/mendeley-ubuntu/" rel="alternate" type="text/html" title="Installing Mendeley Desktop on Ubuntu 22.04"/><published>2022-07-09T20:06:00+00:00</published><updated>2022-07-09T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2022/mendeley-ubuntu</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2022/mendeley-ubuntu/"><![CDATA[<p><strong>Install Mendeley Desktop on Ubuntu 22.04</strong></p> <p>When attempting to install Mendeley Desktop on Ubuntu 22.04, I encountered the following error:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dpkg: dependency problems prevent configuration of mendeleydesktop:
 mendeleydesktop depends on python; however:
  Package python is not installed.
</code></pre></div></div> <p>Here’s the solution that resolved the issue for me:</p> <ol> <li> <p><strong>Download the Mendeley Desktop <code class="language-plaintext highlighter-rouge">.deb</code> package</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>axel <span class="nt">-a</span> https://desktop-download.mendeley.com/download/apt/pool/main/m/mendeleydesktop/mendeleydesktop_1.19.8-stable_amd64.deb
</code></pre></div> </div> </li> <li> <p><strong>Ensure <code class="language-plaintext highlighter-rouge">python</code> command points to Python</strong><br/> If the <code class="language-plaintext highlighter-rouge">python</code> command is missing, install the <code class="language-plaintext highlighter-rouge">python-is-python3</code> package:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>python-is-python3
</code></pre></div> </div> </li> <li> <p><strong>Extract the <code class="language-plaintext highlighter-rouge">.deb</code> file</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ar x mendeleydesktop_1.19.8-stable_amd64.deb
</code></pre></div> </div> </li> <li> <p><strong>Extract the control archive</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar </span>xzf control.tar.gz
</code></pre></div> </div> </li> <li> <p><strong>Edit dependencies</strong><br/> Open <code class="language-plaintext highlighter-rouge">control</code> in a text editor and remove <code class="language-plaintext highlighter-rouge">python</code> from the dependencies list. Then repack the control archive:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">FILES</span><span class="o">=</span><span class="si">$(</span><span class="nb">tar </span>zxvf control.tar.gz<span class="si">)</span>
<span class="nb">tar </span>zcf control.tar.gz <span class="nv">$FILES</span>
</code></pre></div> </div> </li> <li> <p><strong>Repack the <code class="language-plaintext highlighter-rouge">.deb</code> file</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ar rcs mendeleydesktop_1.19.8-stable_amd64_modified.deb debian-binary control.tar.gz data.tar.xz
</code></pre></div> </div> </li> <li> <p><strong>Install Python 2</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>python2
</code></pre></div> </div> </li> <li> <p><strong>Create a symlink for Python 2</strong><br/> Point <code class="language-plaintext highlighter-rouge">/usr/bin/python</code> to Python 2:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mv</span> /usr/bin/python /usr/bin/python_old
<span class="nb">sudo ln</span> <span class="nt">-s</span> /usr/bin/python2 /usr/bin/python
</code></pre></div> </div> </li> <li> <p><strong>Install the modified Mendeley Desktop package</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dpkg <span class="nt">-i</span> mendeleydesktop_1.19.8-stable_amd64_modified.deb
</code></pre></div> </div> </li> <li> <p><strong>Restore the original <code class="language-plaintext highlighter-rouge">python</code> symlink</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo rm</span> /usr/bin/python
<span class="nb">sudo mv</span> /usr/bin/python_old /usr/bin/python
</code></pre></div> </div> </li> </ol> <p><strong>References:</strong></p> <ul> <li><a href="https://askubuntu.com/questions/1405042/how-to-install-mendeley-on-ubuntu-22-04">Ask Ubuntu: Installing Mendeley on Ubuntu 22.04</a></li> <li><a href="https://serverfault.com/questions/250224/how-do-i-get-apt-get-to-ignore-some-dependencies">Server Fault: Ignoring Dependencies in apt-get</a></li> </ul>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="mendeley"/><category term="ubuntu"/><summary type="html"><![CDATA[Guide to resolving dependency issues when installing Mendeley Desktop on Ubuntu 22.04, including steps to download, modify, and configure necessary packages and dependencies to ensure compatibility.]]></summary></entry><entry><title type="html">Resolving PackageKit Blocking Zypper in OpenSUSE</title><link href="https://miftanurfarid.github.io/blog/2022/packagekit-blocking/" rel="alternate" type="text/html" title="Resolving PackageKit Blocking Zypper in OpenSUSE"/><published>2022-07-06T20:06:00+00:00</published><updated>2022-07-06T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2022/packagekit-blocking</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2022/packagekit-blocking/"><![CDATA[<p>If PackageKit is blocking Zypper, you can disable and mask the PackageKit service to prevent it from running:</p> <ol> <li><strong>Disable and stop PackageKit:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl disable <span class="nt">--now</span> packagekit.service
</code></pre></div> </div> <p>This command stops the service immediately and disables it from starting on boot.</p> </li> <li><strong>Mask the PackageKit service:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl mask packagekit.service
</code></pre></div> </div> <p>Masking the service prevents it from being started by any means, ensuring it won’t interfere with Zypper.</p> </li> </ol> <p>By disabling and masking PackageKit, you can freely use Zypper for package management without interruptions.</p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="packagekit"/><category term="opensuse"/><category term="service"/><summary type="html"><![CDATA[Steps to stop PackageKit from interfering with Zypper package management in OpenSUSE.]]></summary></entry><entry><title type="html">Switching from Debian Stable to Debian Testing with Indonesian Repository</title><link href="https://miftanurfarid.github.io/blog/2022/debian-testing/" rel="alternate" type="text/html" title="Switching from Debian Stable to Debian Testing with Indonesian Repository"/><published>2022-06-23T20:06:00+00:00</published><updated>2022-06-23T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2022/debian-testing</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2022/debian-testing/"><![CDATA[<p>To switch from Debian Stable to Debian Testing and utilize an Indonesian repository, follow these steps:</p> <ol> <li><strong>Backup the current <code class="language-plaintext highlighter-rouge">sources.list</code> file:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
</code></pre></div> </div> <p>This creates a backup of your current sources list in case you need to revert to the Stable release.</p> </li> <li><strong>Create a new <code class="language-plaintext highlighter-rouge">sources.list</code>:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo echo "deb http://kartolo.sby.datautama.net.id/debian/ testing main contrib non-free" &gt; /etc/apt/sources.list
</code></pre></div> </div> <p>This command replaces the sources to point to the Testing repository at an Indonesian mirror.</p> </li> <li><strong>Update and upgrade packages:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update &amp;&amp; sudo apt upgrade -y &amp;&amp; sudo apt dist-upgrade -y
</code></pre></div> </div> <p>This will update the package list and upgrade your system to Debian Testing. The <code class="language-plaintext highlighter-rouge">dist-upgrade</code> command ensures that all dependencies are managed correctly for the Testing branch.</p> </li> </ol> <p>Switching to Testing allows access to newer packages than those in Debian Stable, while using a local repository can improve download speeds and reliability.</p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="debian"/><category term="stable"/><category term="testing"/><category term="repository"/><summary type="html"><![CDATA[Steps to switch a Debian installation from Stable to Testing using a local Indonesian repository.]]></summary></entry></feed>