<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://miftanurfarid.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://miftanurfarid.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-29T22:15:03+00:00</updated><id>https://miftanurfarid.github.io/feed.xml</id><title type="html">blank</title><subtitle>Sebuah ruang di mana saya berbagi catatan perjalanan dalam mengajar, penelitian, dan bimbingan akademik.</subtitle><entry><title type="html">Using Try-Except for Automatic Installation of Required Python Libraries</title><link href="https://miftanurfarid.github.io/blog/2024/try-except-library/" rel="alternate" type="text/html" title="Using Try-Except for Automatic Installation of Required Python Libraries"/><published>2024-10-28T15:06:00+00:00</published><updated>2024-10-28T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/try-except-library</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/try-except-library/"><![CDATA[<p>To ensure that required libraries like <code class="language-plaintext highlighter-rouge">matplotlib</code>, <code class="language-plaintext highlighter-rouge">numpy</code>, and <code class="language-plaintext highlighter-rouge">librosa</code> are installed, you can use a <code class="language-plaintext highlighter-rouge">try-except</code> block to check for imports and install them using <code class="language-plaintext highlighter-rouge">subprocess</code>. Here’s an example implementation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="c1"># List of required libraries
</span><span class="n">libraries</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">matplotlib</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">numpy</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">librosa</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">library</span> <span class="ow">in</span> <span class="n">libraries</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">__import__</span><span class="p">(</span><span class="n">library</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is already installed.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ImportError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is not installed. Installing </span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_call</span><span class="p">([</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-m</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pip</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">install</span><span class="sh">"</span><span class="p">,</span> <span class="n">library</span><span class="p">])</span>
</code></pre></div></div> <p>Note:</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">os</code> library is part of Python’s standard library, so it shouldn’t require installation. You can remove it from the list if it’s not needed.</li> <li>To run this, Python must have internet access and permission to install libraries.</li> </ul>]]></content><author><name></name></author><category term="python"/><category term="python"/><category term="try-except"/><summary type="html"><![CDATA[This post discusses how to use try-except blocks to ensure that required Python libraries are installed automatically.]]></summary></entry><entry><title type="html">Disabling KSSHASKPASS in Linux</title><link href="https://miftanurfarid.github.io/blog/2024/disable-ksshaskpass/" rel="alternate" type="text/html" title="Disabling KSSHASKPASS in Linux"/><published>2024-08-04T20:06:00+00:00</published><updated>2024-08-04T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/disable-ksshaskpass</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/disable-ksshaskpass/"><![CDATA[<p>There are two ways to address the problem:</p> <ol> <li>Remove the package (usually ksshaskpass) associated with <code class="language-plaintext highlighter-rouge">/etc/xdg/plasma-workspace/env/ksshaskpass.sh</code>, as this is where <code class="language-plaintext highlighter-rouge">SSH_ASKPASS</code> is being set.</li> <li>Add the line <code class="language-plaintext highlighter-rouge">unset SSH_ASKPASS</code> to your <code class="language-plaintext highlighter-rouge">.bashrc</code> file.</li> </ol> <p><strong>Source:</strong><br/> <a href="https://unix.stackexchange.com/questions/374729/how-to-not-use-ksshaskpass-with-ssh">Unix Stack Exchange</a></p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="bashrc"/><summary type="html"><![CDATA[Learn how to disable KSSHASKPASS to prevent SSH_ASKPASS from being set, either by removing the package or modifying your bashrc file.]]></summary></entry><entry><title type="html">Install Jekyll on OpenSuse</title><link href="https://miftanurfarid.github.io/blog/2021/jekyll-opensuse/" rel="alternate" type="text/html" title="Install Jekyll on OpenSuse"/><published>2021-08-04T15:06:00+00:00</published><updated>2021-08-04T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/jekyll-opensuse</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/jekyll-opensuse/"><![CDATA[<ol> <li> <p><strong>Install required dependencies</strong> (for example, nokogiri):</p> <p>Replace the version <code class="language-plaintext highlighter-rouge">libgdbm4</code> with whatever version your release provides.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>zypper <span class="k">in </span>autoconf libopenssl-devel libyaml-devel readline-devel libxslt-devel ncurses-devel libffi-devel zlib-devel gdbm-devel libgdbm4
</code></pre></div> </div> </li> <li><strong>Clone rbenv to your home folder</strong>: <code class="language-plaintext highlighter-rouge">~/.rbenv</code> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/rbenv/rbenv.git ~/.rbenv
</code></pre></div> </div> </li> <li><strong>Add <code class="language-plaintext highlighter-rouge">~/.rbenv/bin</code> to your <code class="language-plaintext highlighter-rouge">$PATH</code></strong> so that you can use rbenv’s command-line utility. Also, adding <code class="language-plaintext highlighter-rouge">~/.rbenv/bin/rbenv init</code> to your <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file will let you load rbenv automatically. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'export PATH="$HOME/.rbenv/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">echo</span> <span class="s1">'eval "$(rbenv init -)"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
</code></pre></div> </div> </li> <li><strong>Source your <code class="language-plaintext highlighter-rouge">.bashrc</code> to load config changes.</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bashrc
</code></pre></div> </div> </li> <li><strong>Type <code class="language-plaintext highlighter-rouge">rbenv</code> to ensure it’s working:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv
</code></pre></div> </div> </li> <li><strong>To use the <code class="language-plaintext highlighter-rouge">rbenv install</code> command</strong>, which simplifies the installation process for new versions of Ruby, you should install <code class="language-plaintext highlighter-rouge">ruby-build</code>, which we will install as a plugin for rbenv through git: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre></div> </div> </li> <li><strong>List available Ruby versions for installation:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv <span class="nb">install</span> <span class="nt">-l</span>
</code></pre></div> </div> <p>This will output a long list of Ruby versions; pick one to install, for example, <code class="language-plaintext highlighter-rouge">2.5.0</code>.</p> <p><strong>Note</strong>: Do not use <code class="language-plaintext highlighter-rouge">sudo</code> as it is not required from your own home directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv <span class="nb">install </span>2.5.0
</code></pre></div> </div> <p>Wait for the installation to finish.</p> </li> <li><strong>Set the new installation of Ruby as your global Ruby version.</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv global 2.5.0
</code></pre></div> </div> </li> <li><strong>Check your reported Ruby version:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby <span class="nt">-v</span>
</code></pre></div> </div> </li> <li><strong>Install Jekyll.</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll
</code></pre></div> </div> </li> </ol> <p><strong>Source:</strong><br/> <a href="https://github.com/jekyll/jekyll/issues/6852">GitHub Jekyll Issue #6852</a></p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="opensuse"/><category term="jekyll"/><summary type="html"><![CDATA[A step-by-step guide to installing Jekyll, a popular static site generator, on OpenSuse using rbenv.]]></summary></entry><entry><title type="html">Install Oh-My-Zsh and Configure Spaceship Theme</title><link href="https://miftanurfarid.github.io/blog/2021/oh-my-zsh/" rel="alternate" type="text/html" title="Install Oh-My-Zsh and Configure Spaceship Theme"/><published>2021-07-29T15:06:00+00:00</published><updated>2021-07-29T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/oh-my-zsh</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/oh-my-zsh/"><![CDATA[<p><strong>Install Oh-My-Zsh</strong></p> <ol> <li>Using wget: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh <span class="nt">-O</span> -<span class="si">)</span><span class="s2">"</span>
</code></pre></div> </div> </li> </ol> <p><strong>Install Spaceship Theme</strong></p> <ol> <li>Install from AUR: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/spaceship-prompt/spaceship-prompt.git <span class="s2">"</span><span class="nv">$ZSH_CUSTOM</span><span class="s2">/themes/spaceship-prompt"</span> <span class="nt">--depth</span><span class="o">=</span>1
<span class="nb">ln</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$ZSH_CUSTOM</span><span class="s2">/themes/spaceship-prompt/spaceship.zsh-theme"</span> <span class="s2">"</span><span class="nv">$ZSH_CUSTOM</span><span class="s2">/themes/spaceship.zsh-theme"</span>
</code></pre></div> </div> </li> <li> <p>Set <code class="language-plaintext highlighter-rouge">ZSH_THEME="spaceship"</code> in your <code class="language-plaintext highlighter-rouge">.zshrc</code>.</p> <p>Add <code class="language-plaintext highlighter-rouge">ZSH_THEME="spaceship"</code> to <code class="language-plaintext highlighter-rouge">~/.zshrc</code>.</p> </li> </ol> <p><strong>Install Powerline Font</strong></p> <ol> <li>Run the following commands: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/powerline/fonts.git <span class="nt">--depth</span><span class="o">=</span>1
<span class="nb">cd </span>fonts
./install.sh
fc-cache <span class="nt">-vf</span>
</code></pre></div> </div> </li> </ol> <p><strong>Visual Studio Codium Settings</strong></p> <p>Edit the file <code class="language-plaintext highlighter-rouge">~/.config/VSCodium/User/settings.json</code>:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"git.autofetch"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"terminal.integrated.automationShell.linux"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/bin/zsh"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"terminal.integrated.fontFamily"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ubuntu Mono derivative Powerline"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"terminal.integrated.rendererType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"canvas"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"terminal.integrated.fontSize"</span><span class="p">:</span><span class="w"> </span><span class="mi">12</span><span class="p">,</span><span class="w">
    </span><span class="nl">"terminal.integrated.lineHeight"</span><span class="p">:</span><span class="w"> </span><span class="mf">1.1</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p><strong>Sources:</strong></p> <ul> <li><a href="https://ohmyz.sh/">Oh My Zsh</a></li> <li><a href="https://github.com/spaceship-prompt/spaceship-prompt">Spaceship Prompt</a></li> <li><a href="https://github.com/powerline/fonts">Powerline Fonts</a></li> <li><a href="https://gist.github.com/480/3b41f449686a089f34edb45d00672f28">Gist</a></li> </ul>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="zsh"/><summary type="html"><![CDATA[A step-by-step guide to installing Oh-My-Zsh, setting up the Spaceship theme, and configuring Visual Studio Codium with Powerline fonts.]]></summary></entry><entry><title type="html">Backing Up Data to Google Drive with Rclone</title><link href="https://miftanurfarid.github.io/blog/2021/rclone-google-drive/" rel="alternate" type="text/html" title="Backing Up Data to Google Drive with Rclone"/><published>2021-07-27T15:06:00+00:00</published><updated>2021-07-27T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/rclone-google-drive</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/rclone-google-drive/"><![CDATA[<p><strong>A. Preparation</strong></p> <ol> <li> <p><strong>Install Rclone</strong></p> <p>Since I am using Manjaro, which is Arch-based, to install Rclone:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-S</span> rclone
</code></pre></div> </div> </li> <li> <p><strong>Create a Folder for Mounting the Drive</strong></p> <p>Here, I create a folder in my home directory named <code class="language-plaintext highlighter-rouge">mydrive</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> ~/mydrive
</code></pre></div> </div> <p>Thus, the directory will be <code class="language-plaintext highlighter-rouge">~/mydrive</code>.</p> </li> </ol> <p><strong>B. Configuring Rclone</strong></p> <ol> <li><strong>Open Terminal and Type:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rclone config
</code></pre></div> </div> </li> <li><strong>Type ‘n’ for New Remote.</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n/s/q&gt; n
</code></pre></div> </div> </li> <li><strong>Type the Remote Name.</strong> Here, I will use the name <code class="language-plaintext highlighter-rouge">ITK_drive</code>. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name&gt; ITK_drive
</code></pre></div> </div> <p>A list of drives supported by Rclone will appear.</p> </li> <li><strong>Since I will use Google Drive, type 15 or select ‘drive’.</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Storage&gt; 15
</code></pre></div> </div> </li> <li><strong>Leave the following command lines blank or press Enter:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>client_id&gt; 
client_secret&gt; 
</code></pre></div> </div> </li> <li><strong>Choose 1 for Full access to all files, excluding Application Data Folder.</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scope&gt; 1
</code></pre></div> </div> </li> <li><strong>Leave the following command lines blank or press Enter:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root_folder_id&gt; 
</code></pre></div> </div> </li> <li><strong>Leave the following command lines blank or press Enter:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service_account_file&gt; 
</code></pre></div> </div> </li> <li><strong>Choose ‘n’ or press Enter for Edit advanced config?</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y/n&gt; n
</code></pre></div> </div> </li> <li><strong>Choose ‘y’ or press Enter to Use auto config?</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y/n&gt; y
</code></pre></div> </div> </li> <li><strong>An authentication window will appear in your browser. Choose Allow, and you will see:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'Success!
All done. Please go back to rclone.
</code></pre></div> </div> </li> <li><strong>Return to the terminal. Choose ‘n’ or press Enter for Configure this as a Shared Drive (Team Drive)?</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y/n&gt; n
</code></pre></div> </div> </li> <li><strong>The overall configuration will appear. Choose ‘y’.</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y/e/d&gt; y
</code></pre></div> </div> </li> <li><strong>Then exit the Rclone configuration by choosing ‘q’.</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>e/n/d/r/c/s/q&gt; q
</code></pre></div> </div> </li> </ol> <p>Now, the Rclone configuration is complete. Next is how to use it.</p> <p><strong>C. Using Rclone</strong></p> <ol> <li><strong>If you forget the name of the remote you created earlier, run:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rclone listremotes
</code></pre></div> </div> <p>A list of the remotes you have created will appear:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; rclone listremotes
ITK_drive:
</code></pre></div> </div> </li> <li><strong>Mount the remote to the folder created earlier.</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rclone mount ITK_drive: ~/mydrive
</code></pre></div> </div> </li> <li> <p><strong>Open a new terminal/tab to perform the data backup.</strong></p> </li> <li><strong>The backup command I will use is rsync:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync <span class="nt">-Pruv</span> /folder/yang/akan/dibackup ~/mydrive/folder/tujuan
</code></pre></div> </div> </li> </ol>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="rclone"/><category term="google-drive"/><summary type="html"><![CDATA[A step-by-step guide on configuring and using Rclone to back up data to Google Drive.]]></summary></entry><entry><title type="html">Creating an Example Environment in LaTeX</title><link href="https://miftanurfarid.github.io/blog/2021/example-environment-latex/" rel="alternate" type="text/html" title="Creating an Example Environment in LaTeX"/><published>2021-06-01T15:06:00+00:00</published><updated>2021-06-01T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/example-environment-latex</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/example-environment-latex/"><![CDATA[<p>Use the preamble:</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\usepackage</span><span class="p">{</span>amsthm<span class="p">}</span>
<span class="k">\theoremstyle</span><span class="p">{</span>definition<span class="p">}</span>
<span class="k">\newtheorem</span><span class="p">{</span>exmp<span class="p">}{</span>Example<span class="p">}</span>[section]
</code></pre></div></div> <p>In the document section:</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">\begin{exmp}</span>
    This is an example problem.
<span class="nt">\end{exmp}</span>
</code></pre></div></div> <p>The output will look like this:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2021-06-01-480.webp 480w,/assets/img/2021-06-01-800.webp 800w,/assets/img/2021-06-01-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/2021-06-01.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="latex"/><category term="latex"/><summary type="html"><![CDATA[Learn how to define and use a custom "example" environment in LaTeX documents.]]></summary></entry><entry><title type="html">Merging Multiple PDFs into One PDF on Linux</title><link href="https://miftanurfarid.github.io/blog/2021/merging-multiple-pdf/" rel="alternate" type="text/html" title="Merging Multiple PDFs into One PDF on Linux"/><published>2021-03-23T15:06:00+00:00</published><updated>2021-03-23T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/merging-multiple-pdf</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/merging-multiple-pdf/"><![CDATA[<p><strong>Command Line:</strong></p> <ol> <li>Using <code class="language-plaintext highlighter-rouge">convert</code>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>convert file1.pdf file2.pdf merged.pdf
</code></pre></div> </div> </li> <li>Or using <code class="language-plaintext highlighter-rouge">pdfunite</code>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdfunite <span class="k">in</span><span class="nt">-1</span>.pdf <span class="k">in</span><span class="nt">-2</span>.pdf <span class="k">in</span><span class="nt">-n</span>.pdf out.pdf
</code></pre></div> </div> </li> </ol>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><summary type="html"><![CDATA[Combine several PDF files into a single PDF using command line tools like convert or pdfunite.]]></summary></entry><entry><title type="html">Adding Indonesian Babel to Arch Linux</title><link href="https://miftanurfarid.github.io/blog/2021/babel-indonesian/" rel="alternate" type="text/html" title="Adding Indonesian Babel to Arch Linux"/><published>2021-03-21T15:06:00+00:00</published><updated>2021-03-21T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/babel-indonesian</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/babel-indonesian/"><![CDATA[<p><strong>Adding Indonesian Babel to Arch Linux</strong></p> <p>Command line:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-S</span> texlive-langextra
</code></pre></div></div> <p>In the tex file:</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\usepackage</span><span class="na">[indonesian]</span><span class="p">{</span>babel<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="latex"/><category term="linux"/><category term="latex"/><category term="arch"/><category term="linux"/><summary type="html"><![CDATA[A quick guide to installing the Indonesian language package for LaTeX on Arch Linux using the command line.]]></summary></entry><entry><title type="html">Simple Habits to Become Smarter</title><link href="https://miftanurfarid.github.io/blog/2020/simple-habits/" rel="alternate" type="text/html" title="Simple Habits to Become Smarter"/><published>2020-12-01T15:06:00+00:00</published><updated>2020-12-01T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2020/simple-habits</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2020/simple-habits/"><![CDATA[<p><strong>Becoming smarter doesn’t mean you have to spend a lot of time and energy every day. Just 5 to 10 minutes each day can already make you a smarter person.</strong></p> <p>The habits that can help make us smarter are taken from medium.com, but I forgot to note the link. Hehe.</p> <ol> <li><strong>Plan what you will learn for the upcoming week.</strong> Avoid over-planning or under-acting; keep it realistic. Reflect on what you’ve already learned to avoid getting stuck in a comfort zone, and use this to decide what to study next.</li> <li><strong>Read quality books.</strong> The books you read will reflect who you are.</li> <li><strong>Try to connect new things you’ve learned.</strong> The more you learn, the more connections you can make, which can strengthen your understanding of the material. From what I know, Elon Musk uses this method.</li> <li><strong>Read useful newsletters.</strong> Don’t fill your days with negative news.</li> <li><strong>Create useful and original work.</strong> Then try sharing it with others. This is important because, during the creation process, you will experience failure. These failures are crucial, as you will learn a lot from them.</li> <li><strong>Write down what you’ve learned.</strong> It doesn’t have to be lengthy.</li> <li><strong>Teach others.</strong> It’s undeniable that teaching others can enhance our understanding.</li> <li><strong>Meditate.</strong> Muslims may replace this with performing tahajjud prayers.</li> <li><strong>Take time to think.</strong> Based on what you’ve learned, reflect on whether you can create something better. Seek novelty.</li> <li><strong>Improve your mental strength.</strong></li> <li><strong>Engage in self-reflection.</strong></li> <li><strong>Challenge yourself.</strong> Set tougher targets than before.</li> </ol>]]></content><author><name></name></author><category term="self-improvement"/><category term="intelligence"/><summary type="html"><![CDATA[Discover effective daily habits that can enhance your intelligence in just a few minutes each day.]]></summary></entry><entry><title type="html">Habits of Naturally Positive People</title><link href="https://miftanurfarid.github.io/blog/2020/positive-people/" rel="alternate" type="text/html" title="Habits of Naturally Positive People"/><published>2020-11-16T15:06:00+00:00</published><updated>2020-11-16T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2020/positive-people</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2020/positive-people/"><![CDATA[<p><strong>Why is it important to know these things?</strong> Because people are drawn to those with a positive personality. Have you ever had a “toxic” friend? Annoying, right? So, strive to be a positive person. Additionally, individuals with a positive personality can greatly improve their mental health.</p> <p>Here are some habits of naturally positive people:</p> <ol> <li>Surrounding themselves with positive friends.</li> <li>Appreciating even the smallest things.</li> <li>Having an enjoyable morning routine. Don’t start your day with something you dislike.</li> <li>Always seeking positive news.</li> <li>Continuously striving and valuing their achievements. They realize they are not special, so they need to put in effort to get what they want.</li> <li>Being solution-oriented.</li> <li>Not complaining or blaming circumstances.</li> <li>Always doing good without expecting anything in return.</li> <li>Not judging themselves.</li> <li>Feeling happy when others are happy. They don’t feel envy or jealousy.</li> <li>Being able to say “no” instead of always saying “yes.” They can decline things that might harm or disrupt their happiness without offending others.</li> <li>Holding no grudges. Holding a grudge is like drinking poison and hoping the other person suffers.</li> </ol> <p>Source: <a href="https://medium.com/mind-cafe/12-habits-of-naturally-positive-people-9528977ba011">12 Habits of Naturally Positive People</a></p>]]></content><author><name></name></author><category term="self-improvement"/><category term="positivity"/><summary type="html"><![CDATA[Explore the key habits that define individuals with a positive personality and their impact on mental health.]]></summary></entry></feed>