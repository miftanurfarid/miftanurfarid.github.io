<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://miftanurfarid.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://miftanurfarid.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-30T01:46:46+00:00</updated><id>https://miftanurfarid.github.io/feed.xml</id><title type="html">blank</title><subtitle>Sebuah ruang di mana saya berbagi catatan perjalanan dalam mengajar, penelitian, dan bimbingan akademik.</subtitle><entry><title type="html"></title><link href="https://miftanurfarid.github.io/blog/2024/2021-09-15-uninstall-wrapt/" rel="alternate" type="text/html" title=""/><published>2024-10-30T01:46:46+00:00</published><updated>2024-10-30T01:46:46+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/2021-09-15-uninstall-wrapt</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/2021-09-15-uninstall-wrapt/"><![CDATA[<p>When trying to install TensorFlow, you might encounter an error message stating that it cannot uninstall the package <code class="language-plaintext highlighter-rouge">wrapt</code>. This issue arises due to conflicts between the installed version of <code class="language-plaintext highlighter-rouge">wrapt</code> and the version required by TensorFlow. Fortunately, you can resolve this problem with a couple of simple commands.</p> <h3 id="why-the-error-occurs">Why the Error Occurs</h3> <p>The <code class="language-plaintext highlighter-rouge">wrapt</code> package is a Python library that TensorFlow depends on for functionality, especially in relation to decorators and function wrapping. When TensorFlow is installed or upgraded, it requires a specific version of <code class="language-plaintext highlighter-rouge">wrapt</code>. If an incompatible version is already installed, TensorFlow will attempt to uninstall it but may run into permissions issues or other conflicts.</p> <h3 id="steps-to-resolve-the-issue">Steps to Resolve the Issue</h3> <p>To successfully install TensorFlow while resolving the <code class="language-plaintext highlighter-rouge">wrapt</code> conflict, follow these steps:</p> <ol> <li> <p><strong>Upgrade wrapt with Ignore Installed Flag:</strong> Open your terminal and run the following command. This will force the installation of the latest version of <code class="language-plaintext highlighter-rouge">wrapt</code>, ignoring any currently installed versions.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>wrapt <span class="nt">--upgrade</span> <span class="nt">--ignore-installed</span>
</code></pre></div> </div> <p>This command tells <code class="language-plaintext highlighter-rouge">pip</code> to upgrade <code class="language-plaintext highlighter-rouge">wrapt</code> and bypass any checks that might prevent it from being updated. By doing this, you ensure that you have the version that is compatible with TensorFlow.</p> </li> <li> <p><strong>Install TensorFlow:</strong> After successfully upgrading <code class="language-plaintext highlighter-rouge">wrapt</code>, you can now proceed to install TensorFlow:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>tensorflow
</code></pre></div> </div> <p>This command will install TensorFlow along with its dependencies, including the correctly versioned <code class="language-plaintext highlighter-rouge">wrapt</code> package.</p> </li> </ol>]]></content><author><name></name></author></entry><entry><title type="html">Using Try-Except for Automatic Installation of Required Python Libraries</title><link href="https://miftanurfarid.github.io/blog/2024/try-except-library/" rel="alternate" type="text/html" title="Using Try-Except for Automatic Installation of Required Python Libraries"/><published>2024-10-29T15:06:00+00:00</published><updated>2024-10-29T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/try-except-library</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/try-except-library/"><![CDATA[<p>To ensure that required libraries like <code class="language-plaintext highlighter-rouge">matplotlib</code>, <code class="language-plaintext highlighter-rouge">numpy</code>, and <code class="language-plaintext highlighter-rouge">librosa</code> are installed, you can use a <code class="language-plaintext highlighter-rouge">try-except</code> block to check for imports and install them using <code class="language-plaintext highlighter-rouge">subprocess</code>. Here’s an example implementation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="c1"># List of required libraries
</span><span class="n">libraries</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">matplotlib</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">numpy</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">librosa</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">library</span> <span class="ow">in</span> <span class="n">libraries</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">__import__</span><span class="p">(</span><span class="n">library</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is already installed.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ImportError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is not installed. Installing </span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_call</span><span class="p">([</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-m</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pip</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">install</span><span class="sh">"</span><span class="p">,</span> <span class="n">library</span><span class="p">])</span>
</code></pre></div></div> <p>Note:</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">os</code> library is part of Python’s standard library, so it shouldn’t require installation. You can remove it from the list if it’s not needed.</li> <li>To run this, Python must have internet access and permission to install libraries.</li> </ul>]]></content><author><name></name></author><category term="python"/><category term="python"/><category term="try-except"/><summary type="html"><![CDATA[This post discusses how to use try-except blocks to ensure that required Python libraries are installed automatically.]]></summary></entry><entry><title type="html">Resolving PackageKit Blocking Zypper in OpenSUSE</title><link href="https://miftanurfarid.github.io/blog/2022/packagekit-blocking/" rel="alternate" type="text/html" title="Resolving PackageKit Blocking Zypper in OpenSUSE"/><published>2022-07-06T20:06:00+00:00</published><updated>2022-07-06T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2022/packagekit-blocking</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2022/packagekit-blocking/"><![CDATA[<p>If PackageKit is blocking Zypper, you can disable and mask the PackageKit service to prevent it from running:</p> <ol> <li><strong>Disable and stop PackageKit:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl disable <span class="nt">--now</span> packagekit.service
</code></pre></div> </div> <p>This command stops the service immediately and disables it from starting on boot.</p> </li> <li><strong>Mask the PackageKit service:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl mask packagekit.service
</code></pre></div> </div> <p>Masking the service prevents it from being started by any means, ensuring it won’t interfere with Zypper.</p> </li> </ol> <p>By disabling and masking PackageKit, you can freely use Zypper for package management without interruptions.</p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="packagekit"/><category term="upensuse"/><category term="service"/><summary type="html"><![CDATA[Steps to stop PackageKit from interfering with Zypper package management in OpenSUSE.]]></summary></entry><entry><title type="html">Switching from Debian Stable to Debian Testing with Indonesian Repository</title><link href="https://miftanurfarid.github.io/blog/2022/debian-testing/" rel="alternate" type="text/html" title="Switching from Debian Stable to Debian Testing with Indonesian Repository"/><published>2022-06-23T20:06:00+00:00</published><updated>2022-06-23T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2022/debian-testing</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2022/debian-testing/"><![CDATA[<p>To switch from Debian Stable to Debian Testing and utilize an Indonesian repository, follow these steps:</p> <ol> <li><strong>Backup the current <code class="language-plaintext highlighter-rouge">sources.list</code> file:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
</code></pre></div> </div> <p>This creates a backup of your current sources list in case you need to revert to the Stable release.</p> </li> <li><strong>Create a new <code class="language-plaintext highlighter-rouge">sources.list</code>:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo echo "deb http://kartolo.sby.datautama.net.id/debian/ testing main contrib non-free" &gt; /etc/apt/sources.list
</code></pre></div> </div> <p>This command replaces the sources to point to the Testing repository at an Indonesian mirror.</p> </li> <li><strong>Update and upgrade packages:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update &amp;&amp; sudo apt upgrade -y &amp;&amp; sudo apt dist-upgrade -y
</code></pre></div> </div> <p>This will update the package list and upgrade your system to Debian Testing. The <code class="language-plaintext highlighter-rouge">dist-upgrade</code> command ensures that all dependencies are managed correctly for the Testing branch.</p> </li> </ol> <p>Switching to Testing allows access to newer packages than those in Debian Stable, while using a local repository can improve download speeds and reliability.</p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="debian"/><category term="stable"/><category term="testing"/><category term="repository"/><summary type="html"><![CDATA[Steps to switch a Debian installation from Stable to Testing using a local Indonesian repository.]]></summary></entry><entry><title type="html">Creating a Button in Beamer to Open a URL in a Browser</title><link href="https://miftanurfarid.github.io/blog/2021/beamer-button/" rel="alternate" type="text/html" title="Creating a Button in Beamer to Open a URL in a Browser"/><published>2021-11-01T20:06:00+00:00</published><updated>2021-11-01T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/beamer-button</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/beamer-button/"><![CDATA[<p>In Beamer presentations, you can create interactive buttons that open a URL in a web browser using linking commands from the <code class="language-plaintext highlighter-rouge">hyperref</code> package. For example, the <code class="language-plaintext highlighter-rouge">\href</code> command can be used to link a button to any URL.</p> <h3 id="example">Example</h3> <p>Here’s a simple example to create a button in Beamer that links to a website:</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\documentclass</span><span class="p">{</span>beamer<span class="p">}</span>
 
<span class="nt">\begin{document}</span>
 
<span class="nt">\begin{frame}</span>
    <span class="k">\href</span><span class="p">{</span>http://tex.stackexchange.com/q/20800/5701<span class="p">}{</span><span class="k">\beamergotobutton</span><span class="p">{</span>Link<span class="p">}}</span>
<span class="nt">\end{frame}</span>
 
<span class="nt">\end{document}</span>
</code></pre></div></div> <p>In this example:</p> <ul> <li><code class="language-plaintext highlighter-rouge">\href{URL}{\beamergotobutton{Button Text}}</code> is the command that creates the button. Replace <code class="language-plaintext highlighter-rouge">URL</code> with your desired link and <code class="language-plaintext highlighter-rouge">Button Text</code> with your button’s label.</li> <li><code class="language-plaintext highlighter-rouge">\beamergotobutton</code> generates a clickable button styled in Beamer’s theme, making it visually distinct and easy to use in your presentation.</li> </ul> <p>This technique is particularly useful for embedding links directly into your slides, making it easy to navigate to external resources during a presentation.</p>]]></content><author><name></name></author><category term="latex"/><category term="latex"/><category term="beamer"/><summary type="html"><![CDATA[Use Beamer and hyperref to create interactive buttons that open web links.]]></summary></entry><entry><title type="html">How to Rename a Theorem or Lemma in Beamer</title><link href="https://miftanurfarid.github.io/blog/2021/rename-theorem/" rel="alternate" type="text/html" title="How to Rename a Theorem or Lemma in Beamer"/><published>2021-09-30T20:06:00+00:00</published><updated>2021-09-30T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/rename-theorem</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/rename-theorem/"><![CDATA[<p>If you need to rename or customize the title of a theorem, lemma, or similar environment in Beamer, you can use the <code class="language-plaintext highlighter-rouge">block</code> environment. This provides flexibility to name the block with any title you prefer, allowing you to maintain consistency with the style and formatting of your presentation.</p> <h3 id="example-usage">Example Usage</h3> <p>Here’s an example of using a custom title in a Beamer slide:</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">\begin{frame}</span>[fragile]
<span class="k">\frametitle</span><span class="p">{</span>Frame Title<span class="p">}</span>
    <span class="nt">\begin{block}</span><span class="p">{</span>Any Title<span class="p">}</span>
        Simmons Hall is composed of metal and concrete.
    <span class="nt">\end{block}</span>
<span class="nt">\end{frame}</span>
</code></pre></div></div> <p>In this example:</p> <ul> <li><strong>Frame Title</strong> is the title of the frame.</li> <li><strong>Any Title</strong> is the customized title for the block, which can replace a standard “Theorem” or “Lemma” title.</li> </ul> <p>This method keeps your content visually aligned with Beamer’s design, while allowing custom naming for sections typically reserved for formal mathematical environments.</p> <p>For more details, see related discussions on customizing Beamer layouts.</p>]]></content><author><name></name></author><category term="latex"/><category term="latex"/><category term="beamer"/><summary type="html"><![CDATA[Learn how to customize the titles of theorem-like environments in Beamer by using the block environment.]]></summary></entry><entry><title type="html">Creating Multiple Columns in Beamer Presentations with the multicol Package</title><link href="https://miftanurfarid.github.io/blog/2021/multicol-beamer/" rel="alternate" type="text/html" title="Creating Multiple Columns in Beamer Presentations with the multicol Package"/><published>2021-09-20T20:06:00+00:00</published><updated>2021-09-20T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/multicol-beamer</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/multicol-beamer/"><![CDATA[<p>Creating visually appealing and organized presentations is essential for effectively communicating your ideas. In LaTeX Beamer presentations, you can easily implement multiple columns using the <code class="language-plaintext highlighter-rouge">multicol</code> package. This feature allows you to present information side by side, which can be particularly useful for comparisons, lists, or highlighting different aspects of a topic.</p> <h3 id="step-by-step-guide-to-using-the-multicol-package">Step-by-Step Guide to Using the <code class="language-plaintext highlighter-rouge">multicol</code> Package</h3> <p>To start using multiple columns in your Beamer presentation, follow these steps:</p> <ol> <li> <p><strong>Include the Multicol Package</strong>:<br/> Add the <code class="language-plaintext highlighter-rouge">multicol</code> package to the preamble of your document. This package provides the necessary functionality to create multiple columns. Your LaTeX preamble should look like this:</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\documentclass</span><span class="p">{</span>beamer<span class="p">}</span>
<span class="k">\usepackage</span><span class="p">{</span>multicol<span class="p">}</span>
</code></pre></div> </div> </li> <li> <p><strong>Define the Multicol Environment</strong>:<br/> You can create a multi-column layout using the <code class="language-plaintext highlighter-rouge">multicols</code> environment. The syntax allows you to specify the number of columns you want.</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">\begin{multicols}</span><span class="p">{</span>2<span class="p">}</span>
first column
<span class="k">\columnbreak</span>
second column
<span class="nt">\end{multicols}</span>
</code></pre></div> </div> <p>In this example, we are creating a layout with two columns. The <code class="language-plaintext highlighter-rouge">\columnbreak</code> command is used to manually break to the next column.</p> </li> </ol> <p>For more detailed information on the <code class="language-plaintext highlighter-rouge">multicol</code> package, check the package documentation or explore LaTeX community forums for examples and best practices.</p>]]></content><author><name></name></author><category term="latex"/><category term="latex"/><category term="beamer"/><category term="babel"/><summary type="html"><![CDATA[Learn how to effectively use the multicol package in Beamer to create multi-column layouts for your presentations.]]></summary></entry><entry><title type="html">How to Place a Brace on the Right Side for Grouping Cases in LaTeX</title><link href="https://miftanurfarid.github.io/blog/2021/right-braches/" rel="alternate" type="text/html" title="How to Place a Brace on the Right Side for Grouping Cases in LaTeX"/><published>2021-09-20T20:06:00+00:00</published><updated>2021-09-20T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/right-braches</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/right-braches/"><![CDATA[<p>When working with mathematical expressions in LaTeX, you may find the need to group cases using braces. While it’s common to see braces on the left side of expressions, sometimes you might want to place them on the right. This can be particularly useful when you want to align your expressions neatly and maintain a clear visual structure.</p> <h3 id="using-the-mathtools-package">Using the <code class="language-plaintext highlighter-rouge">mathtools</code> Package</h3> <p>To achieve this, you can utilize the <code class="language-plaintext highlighter-rouge">mathtools</code> package, which enhances the functionality of LaTeX’s math typesetting capabilities. The package provides various tools for displaying mathematical symbols and constructs more elegantly.</p> <p>One of the environments provided by the <code class="language-plaintext highlighter-rouge">mathtools</code> package is the <code class="language-plaintext highlighter-rouge">rcases*</code> environment. This environment allows you to create right-sided braces, which can be particularly useful for cases or piecewise functions.</p> <h3 id="example-usage">Example Usage</h3> <p>Here’s how to implement a right brace for grouping cases in your document:</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\documentclass</span><span class="p">{</span>article<span class="p">}</span>
<span class="k">\usepackage</span><span class="p">{</span>mathtools<span class="p">}</span>

<span class="nt">\begin{document}</span>
 
<span class="p">\[</span><span class="nb">
</span><span class="nv">\begin</span><span class="p">{</span><span class="nb">rcases</span><span class="o">*</span><span class="p">}</span><span class="nb">
E </span><span class="o">=</span><span class="nb"> mc</span><span class="p">^</span><span class="m">2</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\text</span><span class="p">{</span><span class="nb">foo</span><span class="p">}</span><span class="nb"> </span><span class="nv">\\</span><span class="nb">
</span><span class="nv">\int</span><span class="nb"> x</span><span class="o">-</span><span class="m">3</span><span class="nv">\,</span><span class="nb"> dx </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\text</span><span class="p">{</span><span class="nb">barbaz</span><span class="p">}</span><span class="nb">
</span><span class="nv">\end</span><span class="p">{</span><span class="nb">rcases</span><span class="o">*</span><span class="p">}</span><span class="nb"> y </span><span class="o">=</span><span class="nb"> f</span><span class="o">(</span><span class="nb">x</span><span class="o">)</span><span class="nb">
</span><span class="p">\]</span>

<span class="nt">\end{document}</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2021-09-27-09-26-41-480.webp 480w,/assets/img/2021-09-27-09-26-41-800.webp 800w,/assets/img/2021-09-27-09-26-41-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/2021-09-27-09-26-41.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>In this example, the <code class="language-plaintext highlighter-rouge">rcases*</code> environment is used to create a brace on the right side of the cases. The <code class="language-plaintext highlighter-rouge">&amp;</code> symbol is used to align the contents of each case, while the <code class="language-plaintext highlighter-rouge">\\</code> command separates each case line.</p> <ul> <li><strong>Line 1:</strong> <code class="language-plaintext highlighter-rouge">E = mc^2 &amp; \text{foo}</code> defines the first case, where <code class="language-plaintext highlighter-rouge">E = mc^2</code> is grouped with the label “foo.”</li> <li><strong>Line 2:</strong> <code class="language-plaintext highlighter-rouge">\int x-3\, dx &amp; \text{barbaz}</code> defines the second case, grouping the integral expression with the label “barbaz.”</li> <li>The brace will appear on the right side of the cases, with the variable <code class="language-plaintext highlighter-rouge">y = f(x)</code> positioned alongside it.</li> </ul> <p>This approach provides a clean and organized way to present multiple cases while allowing for right-aligned grouping.</p> <p>For more complex cases or additional formatting options, refer to the <code class="language-plaintext highlighter-rouge">mathtools</code> documentation or explore resources available on the LaTeX community forums.</p>]]></content><author><name></name></author><category term="latex"/><category term="latex"/><category term="mathtools"/><summary type="html"><![CDATA[Learn how to effectively use the mathtools package to create right-sided braces for grouping cases in your LaTeX documents.]]></summary></entry><entry><title type="html">Using Indonesian Babel and Figure Numbering in Beamer Presentations</title><link href="https://miftanurfarid.github.io/blog/2021/babel-beamer/" rel="alternate" type="text/html" title="Using Indonesian Babel and Figure Numbering in Beamer Presentations"/><published>2021-09-20T15:06:00+00:00</published><updated>2021-09-20T15:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/babel-beamer</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/babel-beamer/"><![CDATA[<p>When creating presentations in LaTeX using the Beamer class, you may want to tailor your document to specific languages or formats. For those creating presentations in Indonesian, utilizing the <code class="language-plaintext highlighter-rouge">babel</code> package with the appropriate language option is essential. Additionally, numbering figures can enhance the clarity and professionalism of your slides.</p> <h3 id="step-by-step-guide">Step-by-Step Guide</h3> <p>To set up your Beamer presentation to use Indonesian language settings and enable numbered figure captions, you need to include the following lines in your LaTeX preamble:</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\usepackage</span><span class="na">[bahasai]</span><span class="p">{</span>babel<span class="p">}</span>
<span class="k">\setbeamertemplate</span><span class="p">{</span>caption<span class="p">}</span>[numbered]
</code></pre></div></div> <ol> <li> <p><strong>Include the Babel Package</strong>:<br/> The command <code class="language-plaintext highlighter-rouge">\usepackage[bahasai]{babel}</code> allows you to specify the Indonesian language (Bahasa Indonesia) for your document. This will adjust various typographic features to better align with Indonesian language conventions, such as hyphenation and text direction.</p> </li> <li> <p><strong>Enable Numbered Captions</strong>:<br/> The command <code class="language-plaintext highlighter-rouge">\setbeamertemplate{caption}[numbered]</code> modifies the way captions for figures (and other elements) are displayed. By enabling numbered captions, your figures will be automatically assigned numbers, making it easier for your audience to reference them during your presentation.</p> </li> </ol> <h3 id="conclusion">Conclusion</h3> <p>Incorporating these commands into your Beamer document not only ensures that your content is tailored to the Indonesian language but also enhances the clarity of your figures through numbering. This simple setup can significantly improve the effectiveness of your presentations.</p> <p>For more information about the <code class="language-plaintext highlighter-rouge">babel</code> package and Beamer templates, you may refer to the official documentation or community resources on LaTeX.</p>]]></content><author><name></name></author><category term="latex"/><category term="latex"/><category term="beamer"/><category term="babel"/><summary type="html"><![CDATA[Learn how to configure your LaTeX Beamer presentations to use Indonesian language settings and numbered figure captions.]]></summary></entry><entry><title type="html">Permanently Changing the Theme of MOC Player</title><link href="https://miftanurfarid.github.io/blog/2021/theme-mocp/" rel="alternate" type="text/html" title="Permanently Changing the Theme of MOC Player"/><published>2021-09-18T20:06:00+00:00</published><updated>2021-09-18T20:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2021/theme-mocp</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2021/theme-mocp/"><![CDATA[<p>MOC (Music On Console) is a versatile and lightweight music player for Unix-like operating systems. It operates in a terminal environment and is known for its simplicity and ease of use. One of the ways to enhance your experience with MOC is by customizing its appearance, specifically by changing its theme. This post will guide you through the steps to change the MOC theme permanently, ensuring that your preferred aesthetics are maintained across sessions.</p> <h3 id="why-change-the-theme">Why Change the Theme?</h3> <p>Changing the theme of MOC can significantly enhance your overall experience while using the player. A well-chosen theme can improve visibility and make navigation through your music collection more enjoyable. Whether you prefer a dark theme for a minimalist look or a bright theme for better visibility, MOC provides options that cater to various preferences.</p> <h3 id="steps-to-change-the-theme-permanently">Steps to Change the Theme Permanently</h3> <ol> <li> <p><strong>Copy the Default Configuration File</strong>:<br/> First, you need to create a configuration file for MOC if one does not already exist. You can do this by copying the example configuration file provided by MOC. Open your terminal and run the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cp</span> /usr/share/doc/moc/examples/config.example ~/.moc/config
</code></pre></div> </div> <p>This command copies the example configuration file to your home directory under <code class="language-plaintext highlighter-rouge">~/.moc/config</code>. This file will be used to store your personalized settings.</p> </li> <li> <p><strong>Change Ownership of the Configuration File</strong>:<br/> After copying the configuration file, it’s essential to ensure that your user account has ownership of it. This allows you to edit the file without requiring elevated permissions. Use the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown</span> <span class="nv">$USER</span>:<span class="nv">$USER</span> ~/.moc/config
</code></pre></div> </div> <p>This command changes the ownership of the <code class="language-plaintext highlighter-rouge">config</code> file to your user account, making it easier to modify.</p> </li> <li> <p><strong>Set Your Preferred Theme</strong>:<br/> Now you can specify which theme you want to use. Open the configuration file in your preferred text editor (e.g., <code class="language-plaintext highlighter-rouge">nano</code>, <code class="language-plaintext highlighter-rouge">vim</code>, or <code class="language-plaintext highlighter-rouge">gedit</code>) and add the following lines:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"Theme = /usr/share/moc/themes/green_theme"</span> <span class="o">&gt;&gt;</span> ~/.moc/config
<span class="nb">echo</span> <span class="s2">"XTermTheme = /usr/share/moc/themes/green_theme"</span> <span class="o">&gt;&gt;</span> ~/.moc/config
</code></pre></div> </div> <p>These commands append the theme settings to your MOC configuration file. Replace <code class="language-plaintext highlighter-rouge">green_theme</code> with the name of any other theme available in the <code class="language-plaintext highlighter-rouge">/usr/share/moc/themes/</code> directory if you want to try different styles.</p> </li> <li> <p><strong>Restart MOC</strong>:<br/> After saving your changes, restart MOC to apply the new theme. Simply exit the player and start it again. You should now see your new theme in effect.</p> </li> </ol> <h3 id="additional-resources-and-themes">Additional Resources and Themes</h3> <p>MOC comes with several themes pre-installed, which can be found in the <code class="language-plaintext highlighter-rouge">/usr/share/moc/themes/</code> directory. You can explore these themes and choose one that suits your style best. If you’re interested in customizing themes further, you may also consider creating your own by modifying the existing theme files. Just be sure to back up any files before making changes!</p> <h3 id="conclusion">Conclusion</h3> <p>Changing the theme of MOC permanently allows you to tailor the music player to your liking, enhancing your audio experience. Following the steps outlined above will help you set your preferred theme quickly and easily. For more detailed customization options and features, refer to the MOC documentation or the community forums.</p> <p><strong>Source</strong>: <a href="https://www.linuxslaves.com/2016/04/change-mocp-default-theme-on-linux.html">Linux Slaves - Change MOCP Default Theme on Linux</a></p>]]></content><author><name></name></author><category term="python"/><category term="python"/><category term="try-except"/><summary type="html"><![CDATA[Learn how to set a permanent theme for the Music On Console (MOC) player on Linux, enhancing your audio experience with customized aesthetics.]]></summary></entry></feed>