<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://miftanurfarid.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://miftanurfarid.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-30T11:57:25+00:00</updated><id>https://miftanurfarid.github.io/feed.xml</id><title type="html">blank</title><subtitle>Sebuah ruang di mana saya berbagi catatan perjalanan dalam mengajar, penelitian, dan bimbingan akademik.</subtitle><entry><title type="html"></title><link href="https://miftanurfarid.github.io/blog/2024/2021-09-15-uninstall-wrapt/" rel="alternate" type="text/html" title=""/><published>2024-10-30T11:57:25+00:00</published><updated>2024-10-30T11:57:25+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/2021-09-15-uninstall-wrapt</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/2021-09-15-uninstall-wrapt/"><![CDATA[<p>When trying to install TensorFlow, you might encounter an error message stating that it cannot uninstall the package <code class="language-plaintext highlighter-rouge">wrapt</code>. This issue arises due to conflicts between the installed version of <code class="language-plaintext highlighter-rouge">wrapt</code> and the version required by TensorFlow. Fortunately, you can resolve this problem with a couple of simple commands.</p> <h3 id="why-the-error-occurs">Why the Error Occurs</h3> <p>The <code class="language-plaintext highlighter-rouge">wrapt</code> package is a Python library that TensorFlow depends on for functionality, especially in relation to decorators and function wrapping. When TensorFlow is installed or upgraded, it requires a specific version of <code class="language-plaintext highlighter-rouge">wrapt</code>. If an incompatible version is already installed, TensorFlow will attempt to uninstall it but may run into permissions issues or other conflicts.</p> <h3 id="steps-to-resolve-the-issue">Steps to Resolve the Issue</h3> <p>To successfully install TensorFlow while resolving the <code class="language-plaintext highlighter-rouge">wrapt</code> conflict, follow these steps:</p> <ol> <li> <p><strong>Upgrade wrapt with Ignore Installed Flag:</strong> Open your terminal and run the following command. This will force the installation of the latest version of <code class="language-plaintext highlighter-rouge">wrapt</code>, ignoring any currently installed versions.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>wrapt <span class="nt">--upgrade</span> <span class="nt">--ignore-installed</span>
</code></pre></div> </div> <p>This command tells <code class="language-plaintext highlighter-rouge">pip</code> to upgrade <code class="language-plaintext highlighter-rouge">wrapt</code> and bypass any checks that might prevent it from being updated. By doing this, you ensure that you have the version that is compatible with TensorFlow.</p> </li> <li> <p><strong>Install TensorFlow:</strong> After successfully upgrading <code class="language-plaintext highlighter-rouge">wrapt</code>, you can now proceed to install TensorFlow:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>tensorflow
</code></pre></div> </div> <p>This command will install TensorFlow along with its dependencies, including the correctly versioned <code class="language-plaintext highlighter-rouge">wrapt</code> package.</p> </li> </ol>]]></content><author><name></name></author></entry><entry><title type="html">simple title</title><link href="https://miftanurfarid.github.io/blog/2024/simple/" rel="alternate" type="text/html" title="simple title"/><published>2024-10-30T09:06:00+00:00</published><updated>2024-10-30T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/simple</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/simple/"><![CDATA[<p>simple</p>]]></content><author><name></name></author><category term="simple"/><category term="simple"/><summary type="html"><![CDATA[simple description]]></summary></entry><entry><title type="html">Using Try-Except for Automatic Installation of Required Python Libraries</title><link href="https://miftanurfarid.github.io/blog/2024/try-except-library-copy/" rel="alternate" type="text/html" title="Using Try-Except for Automatic Installation of Required Python Libraries"/><published>2024-10-29T09:06:00+00:00</published><updated>2024-10-29T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/try-except-library%20copy</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/try-except-library-copy/"><![CDATA[<p>To ensure that required libraries like <code class="language-plaintext highlighter-rouge">matplotlib</code>, <code class="language-plaintext highlighter-rouge">numpy</code>, and <code class="language-plaintext highlighter-rouge">librosa</code> are installed, you can use a <code class="language-plaintext highlighter-rouge">try-except</code> block to check for imports and install them using <code class="language-plaintext highlighter-rouge">subprocess</code>. Here’s an example implementation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="c1"># List of required libraries
</span><span class="n">libraries</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">matplotlib</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">numpy</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">librosa</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">library</span> <span class="ow">in</span> <span class="n">libraries</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">__import__</span><span class="p">(</span><span class="n">library</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is already installed.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ImportError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is not installed. Installing </span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_call</span><span class="p">([</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-m</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pip</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">install</span><span class="sh">"</span><span class="p">,</span> <span class="n">library</span><span class="p">])</span>
</code></pre></div></div> <p>Note:</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">os</code> library is part of Python’s standard library, so it shouldn’t require installation. You can remove it from the list if it’s not needed.</li> <li>To run this, Python must have internet access and permission to install libraries.</li> </ul>]]></content><author><name></name></author><category term="python"/><category term="python"/><category term="try-except"/><summary type="html"><![CDATA[This post discusses how to use try-except blocks to ensure that required Python libraries are installed automatically.]]></summary></entry><entry><title type="html">Using Try-Except for Automatic Installation of Required Python Libraries</title><link href="https://miftanurfarid.github.io/blog/2024/try-except-library/" rel="alternate" type="text/html" title="Using Try-Except for Automatic Installation of Required Python Libraries"/><published>2024-10-29T09:06:00+00:00</published><updated>2024-10-29T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/try-except-library</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/try-except-library/"><![CDATA[<p>To ensure that required libraries like <code class="language-plaintext highlighter-rouge">matplotlib</code>, <code class="language-plaintext highlighter-rouge">numpy</code>, and <code class="language-plaintext highlighter-rouge">librosa</code> are installed, you can use a <code class="language-plaintext highlighter-rouge">try-except</code> block to check for imports and install them using <code class="language-plaintext highlighter-rouge">subprocess</code>. Here’s an example implementation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="c1"># List of required libraries
</span><span class="n">libraries</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">matplotlib</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">numpy</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">librosa</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">library</span> <span class="ow">in</span> <span class="n">libraries</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">__import__</span><span class="p">(</span><span class="n">library</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is already installed.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ImportError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s"> is not installed. Installing </span><span class="si">{</span><span class="n">library</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_call</span><span class="p">([</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-m</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pip</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">install</span><span class="sh">"</span><span class="p">,</span> <span class="n">library</span><span class="p">])</span>
</code></pre></div></div> <p>Note:</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">os</code> library is part of Python’s standard library, so it shouldn’t require installation. You can remove it from the list if it’s not needed.</li> <li>To run this, Python must have internet access and permission to install libraries.</li> </ul>]]></content><author><name></name></author><category term="python"/><category term="python"/><category term="try-except"/><summary type="html"><![CDATA[This post discusses how to use try-except blocks to ensure that required Python libraries are installed automatically.]]></summary></entry><entry><title type="html">Missing Emoticons or Emojis on Arch Linux</title><link href="https://miftanurfarid.github.io/blog/2024/emoticon-emoji/" rel="alternate" type="text/html" title="Missing Emoticons or Emojis on Arch Linux"/><published>2024-03-13T13:06:00+00:00</published><updated>2024-03-13T13:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/emoticon-emoji</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/emoticon-emoji/"><![CDATA[<p>Emoticons are not appearing on Instagram, but you can resolve this issue by installing Twemoji from the AUR.</p> <p>Here’s the list of Twemoji packages to install:</p> <ul> <li>Truetype builds of Twemoji; Twitter Color Emoji for everyone: <a href="https://aur.archlinux.org/packages/ttf-twemoji">ttf-twemoji</a></li> <li>A color and B&amp;W emoji SVG-in-OpenType font by Twitter with support for ZWJ, skin tone modifiers, and country flags: <a href="https://aur.archlinux.org/packages/ttf-twemoji-color">ttf-twemoji-color</a></li> </ul> <p>Source: <a href="https://bbs.archlinux.org/viewtopic.php?id=287654">Arch Linux Forum</a></p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="arch"/><category term="emoticons"/><category term="emojis"/><summary type="html"><![CDATA[If emoticons are not appearing on Instagram, you can install Twemoji from the AUR to resolve the issue.]]></summary></entry><entry><title type="html">Resolving Installation Issues with Arch Linux Using Archinstall</title><link href="https://miftanurfarid.github.io/blog/2024/archinstall/" rel="alternate" type="text/html" title="Resolving Installation Issues with Arch Linux Using Archinstall"/><published>2024-03-13T09:06:00+00:00</published><updated>2024-03-13T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/archinstall</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/archinstall/"><![CDATA[<p>OpenSUSE Tumbleweed is the rolling release Linux distribution I usually use. However, since Plasma 6 won’t be released soon in Tumbleweed, I decided to switch to Arch Linux. The installation process for Arch Linux is no longer as complicated as it once was; we can use archinstall.</p> <p>While I was installing Arch Linux using archinstall, I encountered a failure during the installation of the plasma-wayland-session. The error message was <code class="language-plaintext highlighter-rouge">error: target not found plasma-wayland-session</code>. It turned out that archinstall was still using an outdated package list. The solution I found in the Arch Linux forum is as follows:</p> <ol> <li>Update the keyring: <code class="language-plaintext highlighter-rouge">pacman -Sy archlinux-keyring</code></li> <li>Update archinstall: <code class="language-plaintext highlighter-rouge">pacman -Sy archinstall</code></li> <li>Proceed with the installation of Arch Linux using archinstall.</li> </ol> <p><a href="https://bbs.archlinux.org/viewtopic.php?id=293529">Source</a></p>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="arch"/><category term="plasma"/><category term="wayland"/><category term="archinstall"/><category term="opensuse"/><category term="tumbleweed"/><summary type="html"><![CDATA[Learn how to fix installation errors related to plasma-wayland-session in Arch Linux when using archinstall by updating the keyring and the archinstall package.]]></summary></entry><entry><title type="html">Using Axel to Download Password-Protected Files on Linux</title><link href="https://miftanurfarid.github.io/blog/2024/axel-password/" rel="alternate" type="text/html" title="Using Axel to Download Password-Protected Files on Linux"/><published>2024-01-24T09:06:00+00:00</published><updated>2024-01-24T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2024/axel-password</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2024/axel-password/"><![CDATA[<p>One way to download files on Linux through the terminal is by using Axel. The problem arises when the file you want to download requires a username and password. Here’s how to do it:</p> <ol> <li>Use the following command: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>axel -a -n 2 https://username:password@url_file_to_download
</code></pre></div> </div> </li> </ol> <p>If the password contains special characters, enclose the password in quotes, as shown in the example below:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   axel -a -n 2 https://username:'p@ssw0rdun!qu3'@url_file_to_download
</code></pre></div></div> <p>Source: <a href="https://stackoverflow.com/questions/16822086/download-files-with-user-name-and-password-using-axel-downloader-not-accepting-s">Stack Overflow</a></p>]]></content><author><name></name></author><category term="linux"/><category term="software"/><category term="axel"/><category term="linux"/><category term="password"/><summary type="html"><![CDATA[This guide explains how to use Axel in the terminal to download files that require a username and password, including handling special characters in the password.]]></summary></entry><entry><title type="html">Fixing Text and Image Rendering Issues in Brave Browser After Linux Update</title><link href="https://miftanurfarid.github.io/blog/2023/brave-browser/" rel="alternate" type="text/html" title="Fixing Text and Image Rendering Issues in Brave Browser After Linux Update"/><published>2023-10-25T08:06:00+00:00</published><updated>2023-10-25T08:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2023/brave-browser</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2023/brave-browser/"><![CDATA[<p>Text and image rendering issues in the Brave browser often occur following a kernel update. This problem is not exclusive to Brave; Google Chrome typically experiences similar issues.</p> <p>The solution to this problem is to delete the GPUCache:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-fr</span> .config/BraveSoftware/Brave-Browser/Default/GPUCache/
</code></pre></div></div> <p>For more information, visit: <a href="https://community.brave.com/t/text-and-images-stopped-rendering-after-ubuntu-22-04-update/488953/2">Brave Community Discussion</a></p>]]></content><author><name></name></author><category term="linux"/><category term="software"/><category term="brave"/><category term="browser"/><category term="linux"/><summary type="html"><![CDATA[Learn how to resolve text and image rendering problems in Brave browser, often caused by kernel updates, by deleting the GPUCache folder.]]></summary></entry><entry><title type="html">Removing Packman Packages in openSUSE</title><link href="https://miftanurfarid.github.io/blog/2023/packman-opensuse/" rel="alternate" type="text/html" title="Removing Packman Packages in openSUSE"/><published>2023-10-23T05:06:00+00:00</published><updated>2023-10-23T05:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2023/packman-opensuse</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2023/packman-opensuse/"><![CDATA[<ol> <li>Remove the Packman repository: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo zypper removerepo packman
</code></pre></div> </div> </li> <li>Run a distribution upgrade with vendor change allowed: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo zypper dup --allow-vendor-change
</code></pre></div> </div> </li> <li>Use <code class="language-plaintext highlighter-rouge">zypper packages --orphaned</code> to list unused packages, then remove them if desired: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo zypper remove &lt;orphaned-package-name&gt;
</code></pre></div> </div> </li> </ol>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><category term="opensuse"/><category term="packman"/><category term="repository"/><summary type="html"><![CDATA[Learn how to remove the Packman repository, perform a distribution upgrade, and clean up orphaned packages for a streamlined openSUSE setup.]]></summary></entry><entry><title type="html">Setting the Default Browser for JupyterLab on Linux</title><link href="https://miftanurfarid.github.io/blog/2023/jupyter-default-browser/" rel="alternate" type="text/html" title="Setting the Default Browser for JupyterLab on Linux"/><published>2023-09-12T09:06:00+00:00</published><updated>2023-09-12T09:06:00+00:00</updated><id>https://miftanurfarid.github.io/blog/2023/jupyter-default-browser</id><content type="html" xml:base="https://miftanurfarid.github.io/blog/2023/jupyter-default-browser/"><![CDATA[<p>To change the default browser for JupyterLab on Linux, follow these steps:</p> <ol> <li>Open a terminal and run the following command to generate a configuration file for JupyterLab: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter-lab --generate-config
</code></pre></div> </div> <p>This will create a <code class="language-plaintext highlighter-rouge">jupyter_lab_config.py</code> file in <code class="language-plaintext highlighter-rouge">$HOME/.jupyter</code>.</p> </li> <li> <p>Open this file in your preferred text editor.</p> </li> <li>Find the line: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#c.ServerApp.browser = ''
</span></code></pre></div> </div> <p>Remove the <code class="language-plaintext highlighter-rouge">#</code> to uncomment it.</p> </li> <li>Replace the empty string <code class="language-plaintext highlighter-rouge">''</code> with the path to your desired browser. For instance, if you want to use Microsoft Edge, update the line to: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span><span class="p">.</span><span class="n">ServerApp</span><span class="p">.</span><span class="n">browser</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/opt/microsoft/msedge/msedge %s</span><span class="sh">'</span>
</code></pre></div> </div> </li> <li>Save the changes.</li> </ol> <p>Now, when you launch JupyterLab, it should open in your chosen browser by default.</p>]]></content><author><name></name></author><category term="linux"/><category term="git"/><category term="linux"/><category term="git"/><category term="branch"/><summary type="html"><![CDATA[Learn how to configure JupyterLab to open in your preferred browser by adjusting the jupyter_lab_config.py file.]]></summary></entry></feed>